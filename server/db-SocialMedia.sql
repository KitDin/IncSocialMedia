CREATE TABLE __USER(
    USER_ID VARCHAR(200) PRIMARY KEY,
    USER_ACCOUNTNAME VARCHAR(16) UNIQUE NOT NULL,
    USER_EMAIL VARCHAR(200) UNIQUE NOT NULL,
    USER_PASSWORD CHAR(10) NOT NULL,
    USER_CREATEAT DATE,
    USER_UPDATEAT DATE
);

CREATE TABLE __USER_INFOR(
    USER_ID VARCHAR(200) PRIMARY KEY,
    USER_FIRSTNAME VARCHAR(15) NOT NULL,
    USER_SUBNAME VARCHAR(15) NOT NULL,
    USER_NICKNAME VARCHAR(15) NOT NULL,
    USER_NUMBERPHONE CHAR(10),
    USER_AVATARURL VARCHAR(250),
    USER_COVER VARCHAR(250),
    USER_STATUS ENUM('Online', 'Offline', 'Block') DEFAULT 'Online',
    USER_BRITHDAY DATE,
    USER_BIO VARCHAR(200),
    FOREIGN KEY (USER_ID) REFERENCES __USER(USER_ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE __FRIEND_SHIP(
    USER_ID1 VARCHAR(200),
    USER_ID2 VARCHAR(200),
    FS_CREATEAT DATETIME DEFAULT NOW(),
    FOREIGN KEY (USER_ID1) REFERENCES __USER(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (USER_ID2) REFERENCES __USER(USER_ID) ON DELETE CASCADE
);

CREATE TABLE __FRIEND_REQUEST(
    USER_SENDERID VARCHAR(200),
    USER_RECID VARCHAR(200),
    FR_STATUSREQ ENUM('accept', 'pend', 'def') DEFAULT 'pend',
    FR_CREATEAT DATETIME DEFAULT NOW(),
    FOREIGN KEY (USER_SENDERID) REFERENCES __USER(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (USER_RECID) REFERENCES __USER(USER_ID) ON DELETE CASCADE
);

CREATE TABLE __POSTS(
    POST_ID VARCHAR(200) PRIMARY KEY,
    USER_ID VARCHAR(200),
    POST_CONTENT VARCHAR(2000),
    POST_ACCESSMODIFIES ENUM('Private', 'Public', 'Friends Only', 'Custom'),
    POST_TIME DATETIME,
    FOREIGN KEY (USER_ID) REFERENCES __USER(USER_ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE __IMGS_POST(
    IMG_POST_ID INT AUTO_INCREMENT PRIMARY KEY,
    POST_ID VARCHAR(200),
    POST_IMGURL VARCHAR(200),
    FOREIGN KEY (POST_ID) REFERENCES __POSTS(POST_ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE __LIKES(
    USER_ID VARCHAR(200),
    POST_ID VARCHAR(200),
    PRIMARY KEY(USER_ID, POST_ID),
    FOREIGN KEY(USER_ID) REFERENCES __USER(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(POST_ID) REFERENCES __POSTS(POST_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE __HASHTAGS (
    HASHTAG_ID INT AUTO_INCREMENT PRIMARY KEY,
    HASHTAG_NAME VARCHAR(100) UNIQUE NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    POST_COUNT INT DEFAULT 0,
    IS_TRENDING BOOLEAN DEFAULT FALSE
);

CREATE TABLE __POST_TOPICS (
    POST_TOPICS_ID INT AUTO_INCREMENT PRIMARY KEY,
    POST_ID VARCHAR(200),
    HASHTAG_ID INT,
    FOREIGN KEY (POST_ID) REFERENCES __POSTS(POST_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (HASHTAG_ID) REFERENCES __HASHTAGS(HASHTAG_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (POST_ID, HASHTAG_ID)
);

CREATE TABLE __COMMENTS (
    COMMENT_ID VARCHAR(200) PRIMARY KEY,
    POST_ID VARCHAR(200),
    USER_ID VARCHAR(200),
    COMMENT_CONTENT VARCHAR(100),
    COMMENT_TIME DATETIME,
    FOREIGN KEY(USER_ID) REFERENCES __USER(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(POST_ID) REFERENCES __POSTS(POST_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE __REPLYCOMMENT(
    POST_ID VARCHAR(200),
    REPLYCOMMENT VARCHAR(200),
    USER_ID VARCHAR(200),
    COMMENTREPLY_ID VARCHAR(200),
    COMMENTREPLY_CONTENT VARCHAR(100),
    COMMENTREPLY_TIME DATETIME,
    PRIMARY KEY(REPLYCOMMENT, COMMENTREPLY_ID),
    FOREIGN KEY(POST_ID) REFERENCES __POSTS(POST_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(USER_ID) REFERENCES __USER(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(REPLYCOMMENT) REFERENCES __COMMENTS(COMMENT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE __FAVORITES(
    FAVORITES_ID INT AUTO_INCREMENT PRIMARY KEY,
    FAVORITES_BOXSFAVORITE VARCHAR(50)
);

CREATE TABLE __FAVORITES_OF_USER(
    FOU_ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID VARCHAR(200),
    FAVORITES_ID INT,
    FOREIGN KEY(USER_ID) REFERENCES __USER(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(FAVORITES_ID) REFERENCES __FAVORITES(FAVORITES_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE __CONVERSATIONS(
    CON_ID VARCHAR(200) PRIMARY KEY,
    CON_TIMECREATE DATETIME DEFAULT NOW(),
);

CREATE TABLE __CONVERSATION_USER (
    ID VARCHAR(200) AUTO_INCREMENT PRIMARY KEY,
    CON_ID VARCHAR(200),
    USER_ID VARCHAR(200),
    FOREIGN KEY (CON_ID) REFERENCES __CONVERSATIONS(CON_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (USER_ID) REFERENCES __USER(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE __MESSAGES(
    MESS_ID VARCHAR(200) PRIMARY KEY,
    CON_ID VARCHAR(200) NOT NULL,
    SENDER_ID VARCHAR(200) NOT NULL,
    MESSAGE TEXT NOT NULL,
    CREATED_AT DATETIME DEFAULT NOW(),
    FOREIGN KEY (CON_ID) REFERENCES __CONVERSATIONS(CON_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (SENDER_ID) REFERENCES __USER(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE __NOTIFICATIONS (
    NOTIF_ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID VARCHAR(200) NOT NULL, -- User receiving the notification
    TYPE ENUM('message', 'friend_request', 'like', 'comment', 'reply_comment') NOT NULL,
    REF_ID VARCHAR(200), -- Reference ID (e.g., message ID or friend request ID)
    CONTENT VARCHAR(255), -- Notification content or summary
    STATUS ENUM('unread', 'read') DEFAULT 'unread',
    CREATED_AT DATETIME DEFAULT NOW(),
    FOREIGN KEY (USER_ID) REFERENCES __USER(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- trigger
DELIMITER $

CREATE TRIGGER INCREMENT_HASHTAG_POST_COUNT AFTER
    INSERT ON __POST_TOPICS FOR EACH ROW
BEGIN
 
    -- Tăng POST_COUNT cho hashtag vừa được sử dụng trong bài đăng
    UPDATE __HASHTAGS
    SET
        POST_COUNT = POST_COUNT + 1
    WHERE
        HASHTAG_ID = NEW.HASHTAG_ID;
END $ DELIMITER;
 

--
DELIMITER $$ CREATE TRIGGER NEW_MESSAGE_NOTIFICATION AFTER INSERT ON __MESSAGES FOR EACH ROW BEGIN
 -- Insert a notification for the receiver when a new message is sent
DECLARE RECEIVER_ID VARCHAR(
    200
);
 
-- Find the recipient in the conversation
SELECT
    USER_ID INTO RECEIVER_ID
FROM
    CONVERSATION_USER
WHERE
    CON_ID = NEW.CON_ID
    AND USER_ID != NEW.SENDER_ID LIMIT 1;
 
-- Insert the notification for the receiver
IF RECEIVER_ID IS NOT NULL THEN
    INSERT INTO __NOTIFICATIONS (
        USER_ID,
        TYPE,
        REF_ID,
        CONTENT,
        STATUS
    ) VALUES (
        RECEIVER_ID,
        'message',
        NEW.MESS_ID,
        CONCAT('You have a new message from user ', NEW.SENDER_ID),
        'unread'
    );
END IF;
END $$ DELIMITER;
 
--
CREATE EVENT AUTO_DELETE_EMPTY_CONVERSATIONS ON SCHEDULE EVERY 5 MINUTE DO
DELETE FROM __CONVERSATIONS
WHERE
    CON_ID NOT IN (
        SELECT
            DISTINCT CON_ID
        FROM
            __MESSAGES
    )
    AND TIMESTAMPDIFF(MINUTE, CON_TIMECREATE, NOW()) > 5;
 
--
DELIMITER $$ CREATE TRIGGER AFTER_FRIEND_REQUEST AFTER INSERT ON __FRIEND_REQUEST FOR EACH ROW BEGIN INSERT INTO __NOTIFICATIONS (
    USER_ID,
    TYPE,
    REF_ID,
    CONTENT
) VALUES (
    NEW.USER_RECID,
    'friend_request',
    NEW.USER_SENDERID,
    CONCAT('You have a new friend request from user ID ', NEW.USER_SENDERID)
);
END;
$$ DELIMITER;
 
--
DELIMITER /
/

CREATE TRIGGER AFTER_FRIEND_SHIP_INSERT AFTER
    INSERT ON __FRIEND_SHIP FOR EACH ROW
BEGIN
 
    -- Xoá thông báo lời mời kết bạn giữa hai người dùng
    DELETE FROM __NOTIFICATIONS
    WHERE
        TYPE = 'friend_request'
        AND ( (USER_ID = NEW.USER_ID1
        AND REF_ID = NEW.USER_ID2)
        OR (USER_ID = NEW.USER_ID2
        AND REF_ID = NEW.USER_ID1) );
 
    -- Thông báo cho USER_ID1 rằng USER_ID2 đã trở thành bạn bè
    INSERT INTO __NOTIFICATIONS (
        USER_ID,
        TYPE,
        REF_ID,
        CONTENT
    ) VALUES (
        NEW.USER_ID1,
        'friend_request',
        NEW.USER_ID2,
        CONCAT('You are now friends with user ID ', NEW.USER_ID2)
    );
 
    -- Thông báo cho USER_ID2 rằng USER_ID1 đã trở thành bạn bè
    INSERT INTO __NOTIFICATIONS (
        USER_ID,
        TYPE,
        REF_ID,
        CONTENT
    ) VALUES (
        NEW.USER_ID2,
        'friend_request',
        NEW.USER_ID1,
        CONCAT('You are now friends with user ID ', NEW.USER_ID1)
    );
END;
 

--
// DELIMITER;
DELIMITER // CREATE TRIGGER AFTER_FRIEND_SHIP_DELETE AFTER
DELETE ON __FRIEND_SHIP FOR EACH ROW BEGIN
 -- Xoá tất cả thông báo liên quan giữa hai người dùng
DELETE FROM __NOTIFICATIONS
WHERE
    (USER_ID = OLD.USER_ID1
    AND REF_ID = OLD.USER_ID2)
    OR (USER_ID = OLD.USER_ID2
    AND REF_ID = OLD.USER_ID1);
END;
// DELIMITER;
 
--
DELIMITER /
/

CREATE TRIGGER AFTER_LIKE_INSERT AFTER
    INSERT ON __LIKES FOR EACH ROW
BEGIN
 
    -- Lấy user ID của chủ sở hữu bài viết
    DECLARE
        POST_OWNER VARCHAR(200);
        SELECT     USER_ID INTO POST_OWNER FROM __POSTS WHERE POST_ID = NEW.POST_ID;
        IF         POST_OWNER != NEW.USER_ID THEN
            INSERT INTO __NOTIFICATIONS (
                USER_ID,
                TYPE,
                REF_ID,
                CONTENT
            ) VALUES (
                POST_OWNER,
                'like',
                NEW.POST_ID,
                NEW.USER_ID
            );
        END IF;
    END;
    // DELIMITER;
    DELIMITER // CREATE TRIGGER AFTER_COMMENT_INSERT AFTER INSERT ON __COMMENTS FOR EACH ROW BEGIN
 -- Lấy user ID của chủ sở hữu bài viết
    DECLARE POST_OWNER VARCHAR(
        200
    );
    SELECT
        USER_ID INTO POST_OWNER
    FROM
        __POSTS
    WHERE
        POST_ID = NEW.POST_ID;
    IF POST_OWNER != NEW.USER_ID THEN
        INSERT INTO __NOTIFICATIONS (
            USER_ID,
            TYPE,
            REF_ID,
            CONTENT
        ) VALUES (
            POST_OWNER,
            'comment',
            NEW.COMMENT_ID,
            CONCAT(NEW.USER_ID)
        );
    END IF;
END;
// DELIMITER;
 
--
DELIMITER /
/

CREATE TRIGGER AFTER_REPLY_COMMENT_INSERT AFTER
    INSERT ON __REPLYCOMMENT FOR EACH ROW
BEGIN
 
    -- Lấy user ID của người đã viết bình luận gốc
    DECLARE
        COMMENT_OWNER VARCHAR(200);
        SELECT        USER_ID INTO COMMENT_OWNER FROM __COMMENTS WHERE COMMENT_ID = NEW.REPLYCOMMENT;
        IF            COMMENT_OWNER != NEW.USER_ID THEN
            INSERT INTO __NOTIFICATIONS (
                USER_ID,
                TYPE,
                REF_ID,
                CONTENT
            ) VALUES (
                COMMENT_OWNER,
                'reply_comment',
                NEW.COMMENTREPLY_ID,
                CONCAT('Your comment has been replied to by user ID ', NEW.USER_ID)
            );
        END IF;
    END;
    // DELIMITER;
    DELIMITER $$ CREATE TRIGGER DELETE_LIKE_NOTIFICATION AFTER
    DELETE ON __LIKES FOR EACH ROW BEGIN
 -- Xoá thông báo liên quan đến like đã bị xoá
    DELETE FROM __NOTIFICATIONS
    WHERE
        TYPE = 'like'
        AND REF_ID = OLD.POST_ID
        AND USER_ID = OLD.USER_ID;
END $$ DELIMITER;
 
--
SHOW TABLES FROM INC_SOCIALMEDIA;